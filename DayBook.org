* TODO Start Vote + Countdown. Aka : distributed countdown
** Should the voters see the countdown ? Would be nice
** Careful about international times : could be a second story
** Just show the countdown in fact, no need for the possibility to vote yet. It's a distributed countdown in fact
** How long the countdown ? 10s, we'll see later
** for the animator : when I click start vote, I should see a countdown from 10s to 0s
** for the voters : when animator starts the vote, I should see a countdown from ~10s to 0s + a mention that a vote is running
** How to do that
*** animator : simple, a bit of js
*** voters
**** When the animator starts, he should send something to the server
**** the server will notify voters
**** the voters must be listening for such a message in order to display the countdown
**** the animator could display his countdown the same way as any voter (through server back and forth, this would allow the server to fix the end time)
*** from a DB point of view, we can have fields for current-vote in the Team table. This might be another case for more DDD
*** testing
**** js and UI
**** if we use selenium and a headless browser, we can e2e test the animator alone, and a voter alone by mimicking an animator start vote command
**** js unit tests
** TODO Write 2 cucumber tests
** TODO plug in Selenium to test drive
** TODO see if headless required for CI, do it, otherwise, postpone for later story
** TODO the notification from the animator
** TODO handling the request and sending an event to the participants
** TODO Subscribe to the event from the client
** TODO display a countdown in the client
* Next Stories
* Smells
** TODO should the smells be somewhere in the code ? could a static code analysis tool list them for me ? Code Climate
*** TODO we could use other badges on top of the readme (check rubocop)
** TODO fix warnings in cucumber
** TODO TeamMember is painful to write. What about participant ?
** TODO There's an 'if' in the middle of the team_member/show view
** TODO we could pass in just the team_member to the team_member/show view, and delegate all the rest to the model
*** team_member.team_name
*** team_member.animator?
*** This would make the view depend on less things
** TODO encapsulating models is difficult, should we move to hexagonal architecture ?
*** Moved the if_needed_pick_animator to Team. Great.
*** I now have tests in controller which are redundant with the ones I should write in Team_spec.rb
*** If the Team was well encapsulated, I could be sure that the only way to change it is through this method !
*** => It would be better to move to hexagonal model !
*** il n'y a presque rien
| team                    | team member |
|-------------------------+-------------|
| name                    | name        |
| members                 | team        |
| animator                |             |
| if_needed_pick_animator |             |
*** https://medium.com/@vsavkin/hexagonal-architecture-for-rails-developers-8b1fee64a613#.c2giyb3mh
*** TODO move the save out of the if_needed_pick_animator method
*** TODO go through the team instead of the TeamMember.find_or_create to build the team member<
*** TODO extract a repository class for the loads
*** TODO create wrappers around the
** TODO Tests are getting verbose
*** TODO setup FactoryGirl for testing
*** TODO would it be simpler with rspecproxies ?
** TODO add DB primary key on team(name), and team_members(name,team)
** TODO The optimistic lock is not great, they could still have race conditions when getting out of the role of animator.
*** TODO Have a look at how to emit raw sql in rails (or using this sql ast Sylvain talked about)
** TODO no static code analysis or coverage
*** Add Rubocop and guard-rubocop
** TODO fix `rake cucumber`
